# Default server configuration

# Redirect http to https
server {
  listen 80 default_server;
  server_name {{ app_domain }};

  return 301 https://$server_name$request_uri;
}

server {
  listen 443 ssl spdy default_server;
  server_name {{ app_domain }};

  ##
  # SSL
  ##

  # SSL strong security: https://cipherli.st

  ssl_protocols              TLSv1.2 TLSv1 TLSv1.1;

  ssl_prefer_server_ciphers  on;
  ssl_ciphers                EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;
  # ssl_ciphers                EECDH+AESGCM:EECDH+AES:EDH+AESGCM!DSS:!SSLv2;

  ssl_ecdh_curve secp384r1;

  ssl_buffer_size            8k;

  ssl_session_cache          shared:SSL:10m;
  ssl_session_tickets        off;

  ssl_stapling               on;
  ssl_stapling_verify        on;

  resolver                   127.0.0.1 8.8.8.8 8.8.4.4 valid=300s ipv6=off;
  resolver_timeout           5s;

  # HSTS
  add_header                 Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
  add_header                 X-Frame-Options DENY;
  add_header                 X-Content-Type-Options nosniff;

  # openssl x509 -noout -in certfile.pem -pubkey | openssl asn1parse -noout -inform pem -out public.key
  # openssl dgst -sha256 -binary public.key | openssl enc -base64
  # add_header Public-Key-Pins 'pin-sha256="<рассчитанный_SPKI>"; max-age=31536000; includeSubDomains';

  # SSL certificates
  ssl_certificate            /etc/nginx/ssl/nginx.crt;
  ssl_certificate_key        /etc/nginx/ssl/nginx.key;

  # openssl dhparam -out    /etc/nginx/ssl/dhparams.pem 4096
  ssl_dhparam               /etc/nginx/ssl/dhparams.pem;

  # ssl_certificate            /etc/nginx/ssl/{{ app_domain }}.combined.crt;
  # ssl_certificate_key        /etc/nginx/ssl/{{ app_domain }}.key;

  ##
  # Proxy options
  ##

  # needed to forward user's IP address to rails
  proxy_set_header  X-Real-IP          $remote_addr;
  proxy_set_header  X-Forwarded-For    $proxy_add_x_forwarded_for;

  proxy_set_header  X_FORWARDED_PROTO  https;

  proxy_set_header  Host               $http_host;
  proxy_redirect    off;

  ##
  # App
  ##

  passenger_enabled       on;
  passenger_env_var       HTTP_X_QUEUE_START "t=${msec}000";

  rails_env               production;

  root                    {{ app_dir }}/current/public;

  # this rewrites all the requests to the maintenance.html
  # page if it exists in the doc root. This is for capistrano's
  # disable web task
  if (-f $document_root/system/maintenance.html)
  {
    rewrite  ^(.*)$  /system/maintenance.html last;
    break;
  }

  error_page  500 502 503 504     /500.html;
  location = /500.html
  {
    root {{ app_dir }}/current/public;
  }

  error_page  404                 /404.html;
  location = /404.html
  {
    root {{ app_dir }}/current/public;
  }

  # location    /sitemap.xml {
  #   root {{ app_dir }}/current/public/assets;
  #   try_files $uri $uri.gz =404;
  # }

  # Give static assets a far-future header and serve the pre-compressed version of the asset
  # instead of compressing on the fly.
  location    ~ ^/(assets)/ {
    gzip_static on;
    expires     max;
    add_header  Cache-Control public;
    add_header  Last-Modified "";
    add_header  ETag "";
    break;
  }

  # Protect /admin area with password
  # location    ~ ^/(admin)/ {
  #   root                  {{ app_dir }}/current/public;
  #   auth_basic            "Admin area";
  #   auth_basic_user_file  /etc/nginx/auth/admin.auth;
  # }
}

passenger_pre_start https://{{ app_domain }}:443/;

#root /home/git/gitlab/public;
#
#access_log /var/log/nginx/gitlab.access.log;
#error_log /var/log/nginx/gitlab.error.log;
#
#location / {
#    # serve static files from defined root folder;.
#    try_files $uri $uri/index.html $uri.html @gitlab;
#}
#
#location @gitlab {
#    proxy_set_header Host $host;
#    proxy_set_header X-Real-IP $remote_addr;
#    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#    proxy_set_header X-NginX-Proxy true;
#    proxy_set_header X-Forwarded-Proto $scheme;
#
#    proxy_pass http://unix:/home/git/gitlab/tmp/sockets/gitlab.socket;
#    proxy_redirect off;
#    proxy_buffering off;
#}
